generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                   @id @default(autoincrement())
  email                  String                @unique
  password               String
  nickname               String
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  age                    Int?
  gender                 String?
  dailyProgress          DailyWeeklyProgress[]
  friendRequestsSent     FriendRequest[]       @relation("FromUser")
  friendRequestsReceived FriendRequest[]       @relation("ToUser")
  surveyAnswers          SurveyAnswer[]
  surveyResults          SurveyResult?
  badges                 Badge[]
  friendOf               Friend[]              @relation("FriendOf")
  friends                Friend[]              @relation("UserFriends")
  missionsCreated        Mission[]
  missions               MissionCompletion[]

  @@map("user")
}

model Mission {
  id               Int                 @id @default(autoincrement())
  title            String
  description      String
  type             MissionType
  verificationType String
  verificationData Json
  createdAt        DateTime            @default(now())
  userId           Int
  user             User                @relation(fields: [userId], references: [id])
  completions      MissionCompletion[]

  @@index([userId], map: "mission_userId_fkey")
  @@map("mission")
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  status     String
  createdAt  DateTime @default(now())
  fromUser   User     @relation("FromUser", fields: [fromUserId], references: [id])
  toUser     User     @relation("ToUser", fields: [toUserId], references: [id])

  @@index([fromUserId], map: "FriendRequest_fromUserId_fkey")
  @@index([toUserId], map: "FriendRequest_toUserId_fkey")
}

model MissionCompletion {
  id               Int                   @id @default(autoincrement())
  userId           Int
  missionId        Int
  completedAt      DateTime              @default(now())
  verificationData Json
  status           MissionStatus
  feedback         String?               @db.Text
  mission          Mission               @relation(fields: [missionId], references: [id])
  user             User                  @relation(fields: [userId], references: [id])
  verifications    MissionVerification[]

  @@index([missionId], map: "missionCompletion_missionId_fkey")
  @@index([userId], map: "missionCompletion_userId_fkey")
  @@map("missionCompletion")
}

model MissionVerification {
  id                  Int               @id @default(autoincrement())
  missionCompletionId Int
  type                String
  data                Json
  createdAt           DateTime          @default(now())
  missionCompletion   MissionCompletion @relation(fields: [missionCompletionId], references: [id])

  @@index([missionCompletionId], map: "missionVerification_missionCompletionId_fkey")
  @@map("missionVerification")
}

model Badge {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  imageUrl  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "badge_userId_fkey")
  @@map("badge")
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])
  user      User     @relation("UserFriends", fields: [userId], references: [id])

  @@index([friendId], map: "friend_friendId_fkey")
  @@index([userId], map: "friend_userId_fkey")
  @@map("friend")
}

model DailyWeeklyProgress {
  id           Int      @id @default(autoincrement())
  userId       Int
  type         String
  progress     Int      @default(0)
  targetPoints Int
  date         DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "DailyWeeklyProgress_userId_fkey")
}

model SurveyQuestion {
  id      Int            @id @default(autoincrement())
  order   Int
  content String
  answers SurveyAnswer[]
}

model SurveyAnswer {
  id         Int            @id @default(autoincrement())
  userId     Int
  questionId Int
  score      Int
  question   SurveyQuestion @relation(fields: [questionId], references: [id])
  user       User           @relation(fields: [userId], references: [id])

  @@unique([userId, questionId])
  @@index([questionId], map: "SurveyAnswer_questionId_fkey")
}

model SurveyResult {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  totalScore Int
  level      String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

enum MissionType {
  RECEIPT
  GPS
  VOICE
  BUTTON
  DIARY
}

enum MissionStatus {
  PENDING
  VERIFIED
  REJECTED
}
